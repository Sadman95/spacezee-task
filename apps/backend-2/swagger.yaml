openapi: 3.0.0
info:
  title: 'Backend-2'
  description: 'This is API specification for Backend-2'
  contact:
    name: Sadman Sakib
    email: sakibsadman10@gmail.com
  version: 1.0.0
servers:
  - description: backend-2
    url: http://localhost:5001/api
tags:
  - name:   profile
    description: Profile endpoints

paths:
  # Profile
  /profile:
    post:
      summary: Create Profile
      description: Create new profile
      tags: [Profile]
      security:
        - bearerAuth: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateProfileDTO'
      responses:
        200:
          description: Users information
          content:
            'application/json':
              schema:
                type: object
                properties:
                  statusCode:
                    allOf:
                      - $ref: '#/components/schemas/StatusCodeSchema'
                      - example: 200
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Profile created successfully!
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProfileInfoDTO'
                  
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /profile/{userId}:
    get:
      summary: Get single profile
      description: Get single profile
      tags: [Profile]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        200:
          description: Get profile by user id
          content:
            'application/json':
              schema:
                type: object
                properties:
                  statusCode:
                    allOf:
                      - $ref: '#/components/schemas/StatusCodeSchema'
                      - example: 200
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ProfileInfoDTO'
                  
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'

  
components:
  schemas:
    StatusCodeSchema:
      type: integer
      format: int32
    CreateProfileDTO:
      type: object
      properties:
        userId:
          type: string
          example: 64ca5d10e25f1b5e2e8f9b7d
        bio:
          type: string
          example: Software Developer
        interests:
          type: array
          minItems: 1
          items:
            type: string
          example: 
            - coding
            - gaming
                   
          
        
      required: [userId, bio, interests]
    ProfileInfoDTO:
      type: object
      properties:
        bio:
          type: string
          example: Software Developer
        interests:
          type: array
          minItems: 1
          items:
            type: string
          example: 
            - coding
            - gaming

  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCdoe:
                type: integer
                format: int32
                example: 400
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Bad request
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCdoe:
                type: integer
                format: int32
                example: 401
              success:
                type: boolean
                example: true
              message:
                type: string
                example: You aren't authorized
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCdoe:
                type: integer
                format: int32
                example: 403
              success:
                type: boolean
                example: true
              message:
                type: string
                example: Forbidden access
    '404':
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCdoe:
                type: integer
                format: int32
                example: 404
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Resource not found
    '406':
      description: Not Acceptable
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCdoe:
                type: integer
                format: int32
                example: 406
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Not Acceptable
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCdoe:
                type: integer
                format: int32
                example: 409
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Requested resource already exists
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCdoe:
                type: integer
                format: int32
                example: 500
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Something went wrong
    
    
  parameters:
    idPathParam:
      name: userId
      in: path
      description: User id
      required: true
      style: simple
      explode: false
      schema:
        type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
